/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface;

import business.Network;
import business.enterprise.Enterprise;
import business.organization.Organization;
import business.role.Citizen;
import business.role.DamageAnalyst;
import business.role.EmergencyOperationCoordinator;
import business.role.FieldResponseCoordinator;
import business.role.HospitalManager;
import business.role.LogisticsCoordinator;
import business.role.ResourceSpecialist;
import business.role.ResponseTeamAgent;
import business.role.ResponseTeamCoordinator;
import business.role.SystemAdmin;
import business.role.VolunteerCoordinator;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author abhis
 */
public class LoginJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LoginJPanel
     */
    
    Network network;
    MainJFrame mainPanel;
    
    public LoginJPanel(MainJFrame mainPanel,Network network) {
        initComponents();
        this.mainPanel = mainPanel;
        this.network = network;
        workArea.setLayout(new CardLayout()); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        useridlbl = new javax.swing.JLabel();
        passwordlbl = new javax.swing.JLabel();
        passwordpwd = new javax.swing.JPasswordField();
        useridtxt = new javax.swing.JTextField();
        CheckBox = new javax.swing.JCheckBox();
        loginbtn = new javax.swing.JButton();
        useridlbl1 = new javax.swing.JLabel();
        comboSelected = new javax.swing.JComboBox<>();
        workArea = new javax.swing.JPanel();

        splitPane.setDividerLocation(350);

        leftPanel.setBackground(java.awt.SystemColor.activeCaption);

        useridlbl.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        useridlbl.setForeground(new java.awt.Color(0, 0, 153));
        useridlbl.setText("ID/Type:");

        passwordlbl.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        passwordlbl.setForeground(new java.awt.Color(0, 0, 153));
        passwordlbl.setText("Password:");

        passwordpwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordpwdActionPerformed(evt);
            }
        });

        useridtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useridtxtActionPerformed(evt);
            }
        });

        CheckBox.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        CheckBox.setForeground(new java.awt.Color(0, 0, 153));
        CheckBox.setText(" show password ");
        CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxActionPerformed(evt);
            }
        });

        loginbtn.setBackground(new java.awt.Color(0, 0, 153));
        loginbtn.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        loginbtn.setForeground(new java.awt.Color(255, 255, 255));
        loginbtn.setText("LOGIN");
        loginbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginbtnActionPerformed(evt);
            }
        });

        useridlbl1.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        useridlbl1.setForeground(new java.awt.Color(0, 0, 153));
        useridlbl1.setText("Login As:");

        comboSelected.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        comboSelected.setForeground(new java.awt.Color(0, 0, 153));
        comboSelected.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrartor", "Citizen", "Damage Analyst", "Emergency Operation Coordinator", "Field Response Coordinator", "Hospital Manager", "Logistics Coordinator", "Resource Specialist", "Response Team Agent", "Response Team Coordinator", "Volunteer Coordinator"}));
        comboSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelectedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useridlbl)
                    .addComponent(useridtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useridlbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordpwd, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordlbl))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(useridlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(useridtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordpwd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CheckBox)
                .addGap(18, 18, 18)
                .addComponent(useridlbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(loginbtn)
                .addGap(55, 55, 55))
        );

        splitPane.setLeftComponent(leftPanel);

        javax.swing.GroupLayout workAreaLayout = new javax.swing.GroupLayout(workArea);
        workArea.setLayout(workAreaLayout);
        workAreaLayout.setHorizontalGroup(
            workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );
        workAreaLayout.setVerticalGroup(
            workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 571, Short.MAX_VALUE)
        );

        splitPane.setRightComponent(workArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void passwordpwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordpwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordpwdActionPerformed

    private void useridtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useridtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useridtxtActionPerformed

    private void CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxActionPerformed
        // TODO add your handling code here:

        if(CheckBox.isSelected()){
            passwordpwd.setEchoChar((char)0);
        }
        else{
            passwordpwd.setEchoChar('*');
        }
    }//GEN-LAST:event_CheckBoxActionPerformed

    private void loginbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginbtnActionPerformed
        String password = String.valueOf(passwordpwd.getPassword());
        String role = comboSelected.getSelectedItem().toString();
        int id = Integer.parseInt(useridtxt.getText());
        String username = useridtxt.getText();
        
        switch (role.toLowerCase()) {
            case "system administrator":
                loginSystemAdministrator(username, password);
                break;
            case "emergency operation coordinator":
                loginEmergencyOperationCoordinator(id, password);
                break;
            case "resource specialist":
                loginResourceSpecialist(id, password);
                break;
            case "field response coordinator":
                loginFieldResponseCoordinator(id, password);
                break;
            case "damage analyst":
                loginDamageAnalyst(id, password);
                break;
            case "logistics coordinator":
                loginLogisticsCoordinator(id, password);
                break;
            case "hospital manager":
                loginHospitalManager(id, password);
                break;
            case "citizen":
                loginCitizen(id, password);
                break;
            case "volunteer coordinator":
                loginVolunteerCoordinator(id, password);
                break;
            case "response team agent":
                loginResponseTeamAgent(id, password);
                break;
            case "response team coordinator":
                loginResponseTeamCoordinator(id, password);
                break;
            default:
                JOptionPane.showMessageDialog(null, "Invalid role selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loginSystemAdministrator(String username, String password) {
        SystemAdmin admin = SystemAdmin.getInstance();
        if (admin.getAdminName().equals(username) && admin.getAdminPassword().equals(password)) {
            // Login successful, navigate to the System Administrator panel
            // AdminJPanel panel = new AdminJPanel(homeJPanel, business);
            // homeJPanel.add("AdminJPanel", panel);
            // CardLayout layout = (CardLayout) homeJPanel.getLayout();
            // layout.next(homeJPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect credentials for System Administrator", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    private void loginEmergencyOperationCoordinator(int id, String password) {
        EmergencyOperationCoordinator coordinator = EmergencyOperationCoordinator.findCoordinator(id);

        if (coordinator != null) {

            if (new String(coordinator.getPassword()).equals(password)) {
                EmergencyOperationCoordinatorJPanel panel = new EmergencyOperationCoordinatorJPanel();
                workArea.add("EmergencyOperationCooridnatorJPanel", panel);
                CardLayout layout = (CardLayout) workArea.getLayout();
                layout.next(workArea);
            } else {
                JOptionPane.showMessageDialog(null, "Incorrect credentials for Damage Analyst", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Damage Analyst not found", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loginResourceSpecialist(int id, String password) {
        ResourceSpecialist specialist = ResourceSpecialist.findSpecialist(id);
        if (specialist != null) { 
            if(new String(specialist.getPassword()).equals(password)){
                ResourceSpecialistJPanel panel = new ResourceSpecialistJPanel();
                workArea.add("ResourceSpecialistJPanel", panel);
                CardLayout layout = (CardLayout) workArea.getLayout();
                layout.next(workArea);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect credentials for Resource Specialist", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    

        private void loginFieldResponseCoordinator(int id, String password) {
        FieldResponseCoordinator coordinator = FieldResponseCoordinator.findCoordinator(id);

        if (coordinator != null) {

            // Compare the hashed password directly
            if (new String(coordinator.getPassword()).equals(password)) {
                // If they match, proceed with login
                FieldResponseCoordinatorJPanel panel = new FieldResponseCoordinatorJPanel();
                workArea.add("FieldResponseCoordinatorJPanel", panel);
                CardLayout layout = (CardLayout) workArea.getLayout();
                layout.next(workArea);
            } else {
                // If the passwords don't match
                JOptionPane.showMessageDialog(null, "Incorrect credentials for Damage Analyst", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Damage Analyst not found", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }


    

    private void loginDamageAnalyst(int id, String password) {
        DamageAnalyst analyst = DamageAnalyst.findDamageAnalyst(id);

        if (analyst != null) {

            // Compare the hashed password directly
            if (new String(analyst.getPassword()).equals(password)) {
                // If they match, proceed with login
                DamageAnalystJPanel panel = new DamageAnalystJPanel();
                workArea.add("DamageAnalystJPanel", panel);
                CardLayout layout = (CardLayout) workArea.getLayout();
                layout.next(workArea);
            } else {
                // If the passwords don't match
                JOptionPane.showMessageDialog(null, "Incorrect credentials for Damage Analyst", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Damage Analyst not found", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    private void loginLogisticsCoordinator(int id, String password) {
        LogisticsCoordinator coordinator = LogisticsCoordinator.findCoordinator(id);

        if (coordinator != null) {

            if (new String(coordinator.getPassword()).equals(password)) {
                LogisticsCoordinatorJPanel panel = new LogisticsCoordinatorJPanel();
                workArea.add("LogisticsCooridnatorJPanel", panel);
                CardLayout layout = (CardLayout) workArea.getLayout();
                layout.next(workArea);
            } else {
                JOptionPane.showMessageDialog(null, "Incorrect credentials for Damage Analyst", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Damage Analyst not found", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loginHospitalManager(int id, String password) {
        HospitalManager manager = HospitalManager.findManager(id);
        if (manager != null && manager.getPassword().equals(password)) {
            // Navigate to Hospital Manager panel
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect credentials for Hospital Manager", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loginCitizen(int id, String password) {
        Citizen citizen = network.getCitizendirectory().findCitizen(id);
        if (citizen != null && citizen.getPassword().equals(password)) {
            // Navigate to Citizen panel
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect credentials for Citizen", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loginVolunteerCoordinator(int id, String password) {
        VolunteerCoordinator coordinator = VolunteerCoordinator.findCoordinator(id);
        if (coordinator != null && coordinator.getPassword().equals(password)) {
            // Navigate to Volunteer Coordinator panel
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect credentials for Volunteer Coordinator", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loginResponseTeamAgent(int id, String password) {
        ResponseTeamAgent agent = ResponseTeamAgent.findTeamAgent(id);
        ArrayList<ResponseTeamAgent> teamAgents = agent.getAllTeamAgents();
     
        
        
        if (agent != null) {

            if (new String(agent.getPassword()).equals(password)) {
                ResponseTeamAgentJPanel panel = new ResponseTeamAgentJPanel(teamAgents);
                workArea.add("ResponseTeamAgentJPanel", panel);
                CardLayout layout = (CardLayout) workArea.getLayout();
                layout.next(workArea);
            } else {
                JOptionPane.showMessageDialog(null, "Incorrect credentials for Damage Analyst", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Damage Analyst not found", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void loginResponseTeamCoordinator(int id, String password) {
        ResponseTeamCoordinator coordinator = ResponseTeamCoordinator.findCoordinator(id);

        if (coordinator != null) {

            if (new String(coordinator.getPassword()).equals(password)) {
                ResponseTeamCoordinatorJPanel panel = new ResponseTeamCoordinatorJPanel(coordinator);
                workArea.add("ResponseTeamCooridnatorJPanel", panel);
                CardLayout layout = (CardLayout) workArea.getLayout();
                layout.next(workArea);
            } else {
                JOptionPane.showMessageDialog(null, "Incorrect credentials for Damage Analyst", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Damage Analyst not found", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_loginbtnActionPerformed

    private void comboSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSelectedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSelectedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBox;
    private javax.swing.JComboBox<String> comboSelected;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JButton loginbtn;
    private javax.swing.JLabel passwordlbl;
    private javax.swing.JPasswordField passwordpwd;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JLabel useridlbl;
    private javax.swing.JLabel useridlbl1;
    private javax.swing.JTextField useridtxt;
    private javax.swing.JPanel workArea;
    // End of variables declaration//GEN-END:variables
}
